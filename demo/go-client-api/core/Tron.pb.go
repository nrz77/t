// Code generated by protoc-gen-go. DO NOT EDIT.
// source: core/Tron.proto

package core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AccountType int32

const (
	AccountType_Normal     AccountType = 0
	AccountType_AssetIssue AccountType = 1
	AccountType_Contract   AccountType = 2
)

var AccountType_name = map[int32]string{
	0: "Normal",
	1: "AssetIssue",
	2: "Contract",
}
var AccountType_value = map[string]int32{
	"Normal":     0,
	"AssetIssue": 1,
	"Contract":   2,
}

func (x AccountType) String() string {
	return proto.EnumName(AccountType_name, int32(x))
}
func (AccountType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type ReasonCode int32

const (
	ReasonCode_REQUESTED             ReasonCode = 0
	ReasonCode_BAD_PROTOCOL          ReasonCode = 2
	ReasonCode_TOO_MANY_PEERS        ReasonCode = 4
	ReasonCode_DUPLICATE_PEER        ReasonCode = 5
	ReasonCode_INCOMPATIBLE_PROTOCOL ReasonCode = 6
	ReasonCode_NULL_IDENTITY         ReasonCode = 7
	ReasonCode_PEER_QUITING          ReasonCode = 8
	ReasonCode_UNEXPECTED_IDENTITY   ReasonCode = 9
	ReasonCode_LOCAL_IDENTITY        ReasonCode = 10
	ReasonCode_PING_TIMEOUT          ReasonCode = 11
	ReasonCode_USER_REASON           ReasonCode = 16
	ReasonCode_RESET                 ReasonCode = 17
	ReasonCode_SYNC_FAIL             ReasonCode = 18
	ReasonCode_FETCH_FAIL            ReasonCode = 19
	ReasonCode_BAD_TX                ReasonCode = 20
	ReasonCode_BAD_BLOCK             ReasonCode = 21
	ReasonCode_FORKED                ReasonCode = 22
	ReasonCode_UNLINKABLE            ReasonCode = 23
	ReasonCode_INCOMPATIBLE_VERSION  ReasonCode = 24
	ReasonCode_INCOMPATIBLE_CHAIN    ReasonCode = 25
	ReasonCode_TIME_OUT              ReasonCode = 32
	ReasonCode_CONNECT_FAIL          ReasonCode = 33
	ReasonCode_UNKNOWN               ReasonCode = 255
)

var ReasonCode_name = map[int32]string{
	0:   "REQUESTED",
	2:   "BAD_PROTOCOL",
	4:   "TOO_MANY_PEERS",
	5:   "DUPLICATE_PEER",
	6:   "INCOMPATIBLE_PROTOCOL",
	7:   "NULL_IDENTITY",
	8:   "PEER_QUITING",
	9:   "UNEXPECTED_IDENTITY",
	10:  "LOCAL_IDENTITY",
	11:  "PING_TIMEOUT",
	16:  "USER_REASON",
	17:  "RESET",
	18:  "SYNC_FAIL",
	19:  "FETCH_FAIL",
	20:  "BAD_TX",
	21:  "BAD_BLOCK",
	22:  "FORKED",
	23:  "UNLINKABLE",
	24:  "INCOMPATIBLE_VERSION",
	25:  "INCOMPATIBLE_CHAIN",
	32:  "TIME_OUT",
	33:  "CONNECT_FAIL",
	255: "UNKNOWN",
}
var ReasonCode_value = map[string]int32{
	"REQUESTED":             0,
	"BAD_PROTOCOL":          2,
	"TOO_MANY_PEERS":        4,
	"DUPLICATE_PEER":        5,
	"INCOMPATIBLE_PROTOCOL": 6,
	"NULL_IDENTITY":         7,
	"PEER_QUITING":          8,
	"UNEXPECTED_IDENTITY":   9,
	"LOCAL_IDENTITY":        10,
	"PING_TIMEOUT":          11,
	"USER_REASON":           16,
	"RESET":                 17,
	"SYNC_FAIL":             18,
	"FETCH_FAIL":            19,
	"BAD_TX":                20,
	"BAD_BLOCK":             21,
	"FORKED":                22,
	"UNLINKABLE":            23,
	"INCOMPATIBLE_VERSION":  24,
	"INCOMPATIBLE_CHAIN":    25,
	"TIME_OUT":              32,
	"CONNECT_FAIL":          33,
	"UNKNOWN":               255,
}

func (x ReasonCode) String() string {
	return proto.EnumName(ReasonCode_name, int32(x))
}
func (ReasonCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type Transaction_Contract_ContractType int32

const (
	Transaction_Contract_AccountCreateContract         Transaction_Contract_ContractType = 0
	Transaction_Contract_TransferContract              Transaction_Contract_ContractType = 1
	Transaction_Contract_TransferAssetContract         Transaction_Contract_ContractType = 2
	Transaction_Contract_VoteAssetContract             Transaction_Contract_ContractType = 3
	Transaction_Contract_VoteWitnessContract           Transaction_Contract_ContractType = 4
	Transaction_Contract_WitnessCreateContract         Transaction_Contract_ContractType = 5
	Transaction_Contract_AssetIssueContract            Transaction_Contract_ContractType = 6
	Transaction_Contract_DeployContract                Transaction_Contract_ContractType = 7
	Transaction_Contract_WitnessUpdateContract         Transaction_Contract_ContractType = 8
	Transaction_Contract_ParticipateAssetIssueContract Transaction_Contract_ContractType = 9
	Transaction_Contract_AccountUpdateContract         Transaction_Contract_ContractType = 10
	Transaction_Contract_FreezeBalanceContract         Transaction_Contract_ContractType = 11
	Transaction_Contract_UnfreezeBalanceContract       Transaction_Contract_ContractType = 12
	Transaction_Contract_WithdrawBalanceContract       Transaction_Contract_ContractType = 13
	Transaction_Contract_UnfreezeAssetContract         Transaction_Contract_ContractType = 14
	Transaction_Contract_UpdateAssetContract           Transaction_Contract_ContractType = 15
	Transaction_Contract_CustomContract                Transaction_Contract_ContractType = 20
)

var Transaction_Contract_ContractType_name = map[int32]string{
	0:  "AccountCreateContract",
	1:  "TransferContract",
	2:  "TransferAssetContract",
	3:  "VoteAssetContract",
	4:  "VoteWitnessContract",
	5:  "WitnessCreateContract",
	6:  "AssetIssueContract",
	7:  "DeployContract",
	8:  "WitnessUpdateContract",
	9:  "ParticipateAssetIssueContract",
	10: "AccountUpdateContract",
	11: "FreezeBalanceContract",
	12: "UnfreezeBalanceContract",
	13: "WithdrawBalanceContract",
	14: "UnfreezeAssetContract",
	15: "UpdateAssetContract",
	20: "CustomContract",
}
var Transaction_Contract_ContractType_value = map[string]int32{
	"AccountCreateContract":         0,
	"TransferContract":              1,
	"TransferAssetContract":         2,
	"VoteAssetContract":             3,
	"VoteWitnessContract":           4,
	"WitnessCreateContract":         5,
	"AssetIssueContract":            6,
	"DeployContract":                7,
	"WitnessUpdateContract":         8,
	"ParticipateAssetIssueContract": 9,
	"AccountUpdateContract":         10,
	"FreezeBalanceContract":         11,
	"UnfreezeBalanceContract":       12,
	"WithdrawBalanceContract":       13,
	"UnfreezeAssetContract":         14,
	"UpdateAssetContract":           15,
	"CustomContract":                20,
}

func (x Transaction_Contract_ContractType) String() string {
	return proto.EnumName(Transaction_Contract_ContractType_name, int32(x))
}
func (Transaction_Contract_ContractType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{10, 0, 0}
}

type Transaction_ResultCode int32

const (
	Transaction_Result_SUCESS Transaction_ResultCode = 0
	Transaction_Result_FAILED Transaction_ResultCode = 1
)

var Transaction_ResultCode_name = map[int32]string{
	0: "SUCESS",
	1: "FAILED",
}
var Transaction_ResultCode_value = map[string]int32{
	"SUCESS": 0,
	"FAILED": 1,
}

func (x Transaction_ResultCode) String() string {
	return proto.EnumName(Transaction_ResultCode_name, int32(x))
}
func (Transaction_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{10, 1, 0}
}

type BlockInventory_Type int32

const (
	BlockInventory_SYNC    BlockInventory_Type = 0
	BlockInventory_ADVTISE BlockInventory_Type = 1
	BlockInventory_FETCH   BlockInventory_Type = 2
)

var BlockInventory_Type_name = map[int32]string{
	0: "SYNC",
	1: "ADVTISE",
	2: "FETCH",
}
var BlockInventory_Type_value = map[string]int32{
	"SYNC":    0,
	"ADVTISE": 1,
	"FETCH":   2,
}

func (x BlockInventory_Type) String() string {
	return proto.EnumName(BlockInventory_Type_name, int32(x))
}
func (BlockInventory_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{15, 0} }

type Inventory_InventoryType int32

const (
	Inventory_TRX   Inventory_InventoryType = 0
	Inventory_BLOCK Inventory_InventoryType = 1
)

var Inventory_InventoryType_name = map[int32]string{
	0: "TRX",
	1: "BLOCK",
}
var Inventory_InventoryType_value = map[string]int32{
	"TRX":   0,
	"BLOCK": 1,
}

func (x Inventory_InventoryType) String() string {
	return proto.EnumName(Inventory_InventoryType_name, int32(x))
}
func (Inventory_InventoryType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{16, 0} }

type Items_ItemType int32

const (
	Items_ERR         Items_ItemType = 0
	Items_TRX         Items_ItemType = 1
	Items_BLOCK       Items_ItemType = 2
	Items_BLOCKHEADER Items_ItemType = 3
)

var Items_ItemType_name = map[int32]string{
	0: "ERR",
	1: "TRX",
	2: "BLOCK",
	3: "BLOCKHEADER",
}
var Items_ItemType_value = map[string]int32{
	"ERR":         0,
	"TRX":         1,
	"BLOCK":       2,
	"BLOCKHEADER": 3,
}

func (x Items_ItemType) String() string {
	return proto.EnumName(Items_ItemType_name, int32(x))
}
func (Items_ItemType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{17, 0} }

// AccountId, (name, address) use name, (null, address) use address, (name, null) use name,
type AccountId struct {
	Name    []byte `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address []byte `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *AccountId) Reset()                    { *m = AccountId{} }
func (m *AccountId) String() string            { return proto.CompactTextString(m) }
func (*AccountId) ProtoMessage()               {}
func (*AccountId) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *AccountId) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *AccountId) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

// vote message
type Vote struct {
	// the super rep address
	VoteAddress []byte `protobuf:"bytes,1,opt,name=vote_address,json=voteAddress,proto3" json:"vote_address,omitempty"`
	// the vote num to this super rep.
	VoteCount int64 `protobuf:"varint,2,opt,name=vote_count,json=voteCount" json:"vote_count,omitempty"`
}

func (m *Vote) Reset()                    { *m = Vote{} }
func (m *Vote) String() string            { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()               {}
func (*Vote) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *Vote) GetVoteAddress() []byte {
	if m != nil {
		return m.VoteAddress
	}
	return nil
}

func (m *Vote) GetVoteCount() int64 {
	if m != nil {
		return m.VoteCount
	}
	return 0
}

// Account
type Account struct {
	AccountName []byte      `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	Type        AccountType `protobuf:"varint,2,opt,name=type,enum=protocol.AccountType" json:"type,omitempty"`
	// the create address
	Address []byte `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// the trx balance
	Balance int64 `protobuf:"varint,4,opt,name=balance" json:"balance,omitempty"`
	// the votes
	Votes []*Vote `protobuf:"bytes,5,rep,name=votes" json:"votes,omitempty"`
	// the other asset owned by this account
	Asset map[string]int64 `protobuf:"bytes,6,rep,name=asset" json:"asset,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// latest asset operation time
	// the frozen balance
	Frozen []*Account_Frozen `protobuf:"bytes,7,rep,name=frozen" json:"frozen,omitempty"`
	// bandwidth, get from frozen
	NetUsage int64 `protobuf:"varint,8,opt,name=net_usage,json=netUsage" json:"net_usage,omitempty"`
	// this account create time
	CreateTime int64 `protobuf:"varint,9,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	// this last operation time, including transfer, voting and so on. //FIXME fix grammar
	LatestOprationTime int64 `protobuf:"varint,10,opt,name=latest_opration_time,json=latestOprationTime" json:"latest_opration_time,omitempty"`
	// witness block producing allowance
	Allowance int64 `protobuf:"varint,11,opt,name=allowance" json:"allowance,omitempty"`
	// last withdraw time
	LatestWithdrawTime int64 `protobuf:"varint,12,opt,name=latest_withdraw_time,json=latestWithdrawTime" json:"latest_withdraw_time,omitempty"`
	// not used so far
	Code        []byte `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	IsWitness   bool   `protobuf:"varint,14,opt,name=is_witness,json=isWitness" json:"is_witness,omitempty"`
	IsCommittee bool   `protobuf:"varint,15,opt,name=is_committee,json=isCommittee" json:"is_committee,omitempty"`
	// frozen asset(for asset issuer)
	FrozenSupply []*Account_Frozen `protobuf:"bytes,16,rep,name=frozen_supply,json=frozenSupply" json:"frozen_supply,omitempty"`
	// asset_issued_name
	AssetIssuedName          []byte           `protobuf:"bytes,17,opt,name=asset_issued_name,json=assetIssuedName,proto3" json:"asset_issued_name,omitempty"`
	LatestAssetOperationTime map[string]int64 `protobuf:"bytes,18,rep,name=latest_asset_operation_time,json=latestAssetOperationTime" json:"latest_asset_operation_time,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	FreeNetUsage             int64            `protobuf:"varint,19,opt,name=free_net_usage,json=freeNetUsage" json:"free_net_usage,omitempty"`
	FreeAssetNetUsage        map[string]int64 `protobuf:"bytes,20,rep,name=free_asset_net_usage,json=freeAssetNetUsage" json:"free_asset_net_usage,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	LatestConsumeTime        int64            `protobuf:"varint,21,opt,name=latest_consume_time,json=latestConsumeTime" json:"latest_consume_time,omitempty"`
	LatestConsumeFreeTime    int64            `protobuf:"varint,22,opt,name=latest_consume_free_time,json=latestConsumeFreeTime" json:"latest_consume_free_time,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *Account) GetAccountName() []byte {
	if m != nil {
		return m.AccountName
	}
	return nil
}

func (m *Account) GetType() AccountType {
	if m != nil {
		return m.Type
	}
	return AccountType_Normal
}

func (m *Account) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Account) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *Account) GetVotes() []*Vote {
	if m != nil {
		return m.Votes
	}
	return nil
}

func (m *Account) GetAsset() map[string]int64 {
	if m != nil {
		return m.Asset
	}
	return nil
}

func (m *Account) GetFrozen() []*Account_Frozen {
	if m != nil {
		return m.Frozen
	}
	return nil
}

func (m *Account) GetNetUsage() int64 {
	if m != nil {
		return m.NetUsage
	}
	return 0
}

func (m *Account) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Account) GetLatestOprationTime() int64 {
	if m != nil {
		return m.LatestOprationTime
	}
	return 0
}

func (m *Account) GetAllowance() int64 {
	if m != nil {
		return m.Allowance
	}
	return 0
}

func (m *Account) GetLatestWithdrawTime() int64 {
	if m != nil {
		return m.LatestWithdrawTime
	}
	return 0
}

func (m *Account) GetCode() []byte {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *Account) GetIsWitness() bool {
	if m != nil {
		return m.IsWitness
	}
	return false
}

func (m *Account) GetIsCommittee() bool {
	if m != nil {
		return m.IsCommittee
	}
	return false
}

func (m *Account) GetFrozenSupply() []*Account_Frozen {
	if m != nil {
		return m.FrozenSupply
	}
	return nil
}

func (m *Account) GetAssetIssuedName() []byte {
	if m != nil {
		return m.AssetIssuedName
	}
	return nil
}

func (m *Account) GetLatestAssetOperationTime() map[string]int64 {
	if m != nil {
		return m.LatestAssetOperationTime
	}
	return nil
}

func (m *Account) GetFreeNetUsage() int64 {
	if m != nil {
		return m.FreeNetUsage
	}
	return 0
}

func (m *Account) GetFreeAssetNetUsage() map[string]int64 {
	if m != nil {
		return m.FreeAssetNetUsage
	}
	return nil
}

func (m *Account) GetLatestConsumeTime() int64 {
	if m != nil {
		return m.LatestConsumeTime
	}
	return 0
}

func (m *Account) GetLatestConsumeFreeTime() int64 {
	if m != nil {
		return m.LatestConsumeFreeTime
	}
	return 0
}

// frozen balance
type Account_Frozen struct {
	// the frozen trx balance
	FrozenBalance int64 `protobuf:"varint,1,opt,name=frozen_balance,json=frozenBalance" json:"frozen_balance,omitempty"`
	// the expire time
	ExpireTime int64 `protobuf:"varint,2,opt,name=expire_time,json=expireTime" json:"expire_time,omitempty"`
}

func (m *Account_Frozen) Reset()                    { *m = Account_Frozen{} }
func (m *Account_Frozen) String() string            { return proto.CompactTextString(m) }
func (*Account_Frozen) ProtoMessage()               {}
func (*Account_Frozen) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2, 0} }

func (m *Account_Frozen) GetFrozenBalance() int64 {
	if m != nil {
		return m.FrozenBalance
	}
	return 0
}

func (m *Account_Frozen) GetExpireTime() int64 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

// FIXME authority?
type Acuthrity struct {
	Account        *AccountId `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	PermissionName []byte     `protobuf:"bytes,2,opt,name=permission_name,json=permissionName,proto3" json:"permission_name,omitempty"`
}

func (m *Acuthrity) Reset()                    { *m = Acuthrity{} }
func (m *Acuthrity) String() string            { return proto.CompactTextString(m) }
func (*Acuthrity) ProtoMessage()               {}
func (*Acuthrity) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *Acuthrity) GetAccount() *AccountId {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *Acuthrity) GetPermissionName() []byte {
	if m != nil {
		return m.PermissionName
	}
	return nil
}

// FIXME permission
type Permision struct {
	Account *AccountId `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
}

func (m *Permision) Reset()                    { *m = Permision{} }
func (m *Permision) String() string            { return proto.CompactTextString(m) }
func (*Permision) ProtoMessage()               {}
func (*Permision) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *Permision) GetAccount() *AccountId {
	if m != nil {
		return m.Account
	}
	return nil
}

// Witness
type Witness struct {
	Address        []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	VoteCount      int64  `protobuf:"varint,2,opt,name=voteCount" json:"voteCount,omitempty"`
	PubKey         []byte `protobuf:"bytes,3,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Url            string `protobuf:"bytes,4,opt,name=url" json:"url,omitempty"`
	TotalProduced  int64  `protobuf:"varint,5,opt,name=totalProduced" json:"totalProduced,omitempty"`
	TotalMissed    int64  `protobuf:"varint,6,opt,name=totalMissed" json:"totalMissed,omitempty"`
	LatestBlockNum int64  `protobuf:"varint,7,opt,name=latestBlockNum" json:"latestBlockNum,omitempty"`
	LatestSlotNum  int64  `protobuf:"varint,8,opt,name=latestSlotNum" json:"latestSlotNum,omitempty"`
	IsJobs         bool   `protobuf:"varint,9,opt,name=isJobs" json:"isJobs,omitempty"`
}

func (m *Witness) Reset()                    { *m = Witness{} }
func (m *Witness) String() string            { return proto.CompactTextString(m) }
func (*Witness) ProtoMessage()               {}
func (*Witness) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *Witness) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Witness) GetVoteCount() int64 {
	if m != nil {
		return m.VoteCount
	}
	return 0
}

func (m *Witness) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *Witness) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Witness) GetTotalProduced() int64 {
	if m != nil {
		return m.TotalProduced
	}
	return 0
}

func (m *Witness) GetTotalMissed() int64 {
	if m != nil {
		return m.TotalMissed
	}
	return 0
}

func (m *Witness) GetLatestBlockNum() int64 {
	if m != nil {
		return m.LatestBlockNum
	}
	return 0
}

func (m *Witness) GetLatestSlotNum() int64 {
	if m != nil {
		return m.LatestSlotNum
	}
	return 0
}

func (m *Witness) GetIsJobs() bool {
	if m != nil {
		return m.IsJobs
	}
	return false
}

// Vote Change
type Votes struct {
	Address  []byte  `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	OldVotes []*Vote `protobuf:"bytes,2,rep,name=old_votes,json=oldVotes" json:"old_votes,omitempty"`
	NewVotes []*Vote `protobuf:"bytes,3,rep,name=new_votes,json=newVotes" json:"new_votes,omitempty"`
}

func (m *Votes) Reset()                    { *m = Votes{} }
func (m *Votes) String() string            { return proto.CompactTextString(m) }
func (*Votes) ProtoMessage()               {}
func (*Votes) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *Votes) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Votes) GetOldVotes() []*Vote {
	if m != nil {
		return m.OldVotes
	}
	return nil
}

func (m *Votes) GetNewVotes() []*Vote {
	if m != nil {
		return m.NewVotes
	}
	return nil
}

type TXOutput struct {
	Value      int64  `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	PubKeyHash []byte `protobuf:"bytes,2,opt,name=pubKeyHash,proto3" json:"pubKeyHash,omitempty"`
}

func (m *TXOutput) Reset()                    { *m = TXOutput{} }
func (m *TXOutput) String() string            { return proto.CompactTextString(m) }
func (*TXOutput) ProtoMessage()               {}
func (*TXOutput) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *TXOutput) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TXOutput) GetPubKeyHash() []byte {
	if m != nil {
		return m.PubKeyHash
	}
	return nil
}

type TXInput struct {
	RawData   *TXInputRaw `protobuf:"bytes,1,opt,name=raw_data,json=rawData" json:"raw_data,omitempty"`
	Signature []byte      `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *TXInput) Reset()                    { *m = TXInput{} }
func (m *TXInput) String() string            { return proto.CompactTextString(m) }
func (*TXInput) ProtoMessage()               {}
func (*TXInput) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *TXInput) GetRawData() *TXInputRaw {
	if m != nil {
		return m.RawData
	}
	return nil
}

func (m *TXInput) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type TXInputRaw struct {
	TxID   []byte `protobuf:"bytes,1,opt,name=txID,proto3" json:"txID,omitempty"`
	Vout   int64  `protobuf:"varint,2,opt,name=vout" json:"vout,omitempty"`
	PubKey []byte `protobuf:"bytes,3,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
}

func (m *TXInputRaw) Reset()                    { *m = TXInputRaw{} }
func (m *TXInputRaw) String() string            { return proto.CompactTextString(m) }
func (*TXInputRaw) ProtoMessage()               {}
func (*TXInputRaw) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8, 0} }

func (m *TXInputRaw) GetTxID() []byte {
	if m != nil {
		return m.TxID
	}
	return nil
}

func (m *TXInputRaw) GetVout() int64 {
	if m != nil {
		return m.Vout
	}
	return 0
}

func (m *TXInputRaw) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

type TXOutputs struct {
	Outputs []*TXOutput `protobuf:"bytes,1,rep,name=outputs" json:"outputs,omitempty"`
}

func (m *TXOutputs) Reset()                    { *m = TXOutputs{} }
func (m *TXOutputs) String() string            { return proto.CompactTextString(m) }
func (*TXOutputs) ProtoMessage()               {}
func (*TXOutputs) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *TXOutputs) GetOutputs() []*TXOutput {
	if m != nil {
		return m.Outputs
	}
	return nil
}

type Transaction struct {
	RawData *TransactionRaw `protobuf:"bytes,1,opt,name=raw_data,json=rawData" json:"raw_data,omitempty"`
	// only support size = 1,  repeated list here for muti-sig extension
	Signature [][]byte              `protobuf:"bytes,2,rep,name=signature,proto3" json:"signature,omitempty"`
	Ret       []*Transaction_Result `protobuf:"bytes,5,rep,name=ret" json:"ret,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *Transaction) GetRawData() *TransactionRaw {
	if m != nil {
		return m.RawData
	}
	return nil
}

func (m *Transaction) GetSignature() [][]byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Transaction) GetRet() []*Transaction_Result {
	if m != nil {
		return m.Ret
	}
	return nil
}

type Transaction_Contract struct {
	Type         Transaction_Contract_ContractType `protobuf:"varint,1,opt,name=type,enum=protocol.Transaction_Contract_ContractType" json:"type,omitempty"`
	Parameter    *google_protobuf.Any              `protobuf:"bytes,2,opt,name=parameter" json:"parameter,omitempty"`
	Provider     []byte                            `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	ContractName []byte                            `protobuf:"bytes,4,opt,name=ContractName,proto3" json:"ContractName,omitempty"`
}

func (m *Transaction_Contract) Reset()                    { *m = Transaction_Contract{} }
func (m *Transaction_Contract) String() string            { return proto.CompactTextString(m) }
func (*Transaction_Contract) ProtoMessage()               {}
func (*Transaction_Contract) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10, 0} }

func (m *Transaction_Contract) GetType() Transaction_Contract_ContractType {
	if m != nil {
		return m.Type
	}
	return Transaction_Contract_AccountCreateContract
}

func (m *Transaction_Contract) GetParameter() *google_protobuf.Any {
	if m != nil {
		return m.Parameter
	}
	return nil
}

func (m *Transaction_Contract) GetProvider() []byte {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (m *Transaction_Contract) GetContractName() []byte {
	if m != nil {
		return m.ContractName
	}
	return nil
}

type Transaction_Result struct {
	Fee int64                  `protobuf:"varint,1,opt,name=fee" json:"fee,omitempty"`
	Ret Transaction_ResultCode `protobuf:"varint,2,opt,name=ret,enum=protocol.Transaction_ResultCode" json:"ret,omitempty"`
}

func (m *Transaction_Result) Reset()                    { *m = Transaction_Result{} }
func (m *Transaction_Result) String() string            { return proto.CompactTextString(m) }
func (*Transaction_Result) ProtoMessage()               {}
func (*Transaction_Result) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10, 1} }

func (m *Transaction_Result) GetFee() int64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *Transaction_Result) GetRet() Transaction_ResultCode {
	if m != nil {
		return m.Ret
	}
	return Transaction_Result_SUCESS
}

type TransactionRaw struct {
	RefBlockBytes []byte       `protobuf:"bytes,1,opt,name=ref_block_bytes,json=refBlockBytes,proto3" json:"ref_block_bytes,omitempty"`
	RefBlockNum   int64        `protobuf:"varint,3,opt,name=ref_block_num,json=refBlockNum" json:"ref_block_num,omitempty"`
	RefBlockHash  []byte       `protobuf:"bytes,4,opt,name=ref_block_hash,json=refBlockHash,proto3" json:"ref_block_hash,omitempty"`
	Expiration    int64        `protobuf:"varint,8,opt,name=expiration" json:"expiration,omitempty"`
	Auths         []*Acuthrity `protobuf:"bytes,9,rep,name=auths" json:"auths,omitempty"`
	// data not used
	Data []byte `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`
	// only support size = 1,  repeated list here for extension
	Contract []*Transaction_Contract `protobuf:"bytes,11,rep,name=contract" json:"contract,omitempty"`
	// scripts not used
	Scripts   []byte `protobuf:"bytes,12,opt,name=scripts,proto3" json:"scripts,omitempty"`
	Timestamp int64  `protobuf:"varint,14,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *TransactionRaw) Reset()                    { *m = TransactionRaw{} }
func (m *TransactionRaw) String() string            { return proto.CompactTextString(m) }
func (*TransactionRaw) ProtoMessage()               {}
func (*TransactionRaw) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10, 2} }

func (m *TransactionRaw) GetRefBlockBytes() []byte {
	if m != nil {
		return m.RefBlockBytes
	}
	return nil
}

func (m *TransactionRaw) GetRefBlockNum() int64 {
	if m != nil {
		return m.RefBlockNum
	}
	return 0
}

func (m *TransactionRaw) GetRefBlockHash() []byte {
	if m != nil {
		return m.RefBlockHash
	}
	return nil
}

func (m *TransactionRaw) GetExpiration() int64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

func (m *TransactionRaw) GetAuths() []*Acuthrity {
	if m != nil {
		return m.Auths
	}
	return nil
}

func (m *TransactionRaw) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TransactionRaw) GetContract() []*Transaction_Contract {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (m *TransactionRaw) GetScripts() []byte {
	if m != nil {
		return m.Scripts
	}
	return nil
}

func (m *TransactionRaw) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type Transactions struct {
	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *Transactions) Reset()                    { *m = Transactions{} }
func (m *Transactions) String() string            { return proto.CompactTextString(m) }
func (*Transactions) ProtoMessage()               {}
func (*Transactions) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *Transactions) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type BlockHeader struct {
	RawData          *BlockHeaderRaw `protobuf:"bytes,1,opt,name=raw_data,json=rawData" json:"raw_data,omitempty"`
	WitnessSignature []byte          `protobuf:"bytes,2,opt,name=witness_signature,json=witnessSignature,proto3" json:"witness_signature,omitempty"`
}

func (m *BlockHeader) Reset()                    { *m = BlockHeader{} }
func (m *BlockHeader) String() string            { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()               {}
func (*BlockHeader) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *BlockHeader) GetRawData() *BlockHeaderRaw {
	if m != nil {
		return m.RawData
	}
	return nil
}

func (m *BlockHeader) GetWitnessSignature() []byte {
	if m != nil {
		return m.WitnessSignature
	}
	return nil
}

type BlockHeaderRaw struct {
	Timestamp  int64  `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	TxTrieRoot []byte `protobuf:"bytes,2,opt,name=txTrieRoot,proto3" json:"txTrieRoot,omitempty"`
	ParentHash []byte `protobuf:"bytes,3,opt,name=parentHash,proto3" json:"parentHash,omitempty"`
	// bytes nonce = 5;
	// bytes difficulty = 6;
	Number         int64  `protobuf:"varint,7,opt,name=number" json:"number,omitempty"`
	WitnessId      int64  `protobuf:"varint,8,opt,name=witness_id,json=witnessId" json:"witness_id,omitempty"`
	WitnessAddress []byte `protobuf:"bytes,9,opt,name=witness_address,json=witnessAddress,proto3" json:"witness_address,omitempty"`
}

func (m *BlockHeaderRaw) Reset()                    { *m = BlockHeaderRaw{} }
func (m *BlockHeaderRaw) String() string            { return proto.CompactTextString(m) }
func (*BlockHeaderRaw) ProtoMessage()               {}
func (*BlockHeaderRaw) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12, 0} }

func (m *BlockHeaderRaw) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BlockHeaderRaw) GetTxTrieRoot() []byte {
	if m != nil {
		return m.TxTrieRoot
	}
	return nil
}

func (m *BlockHeaderRaw) GetParentHash() []byte {
	if m != nil {
		return m.ParentHash
	}
	return nil
}

func (m *BlockHeaderRaw) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *BlockHeaderRaw) GetWitnessId() int64 {
	if m != nil {
		return m.WitnessId
	}
	return 0
}

func (m *BlockHeaderRaw) GetWitnessAddress() []byte {
	if m != nil {
		return m.WitnessAddress
	}
	return nil
}

// block
type Block struct {
	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
	BlockHeader  *BlockHeader   `protobuf:"bytes,2,opt,name=block_header,json=blockHeader" json:"block_header,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *Block) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *Block) GetBlockHeader() *BlockHeader {
	if m != nil {
		return m.BlockHeader
	}
	return nil
}

type ChainInventory struct {
	Ids       []*ChainInventory_BlockId `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	RemainNum int64                     `protobuf:"varint,2,opt,name=remain_num,json=remainNum" json:"remain_num,omitempty"`
}

func (m *ChainInventory) Reset()                    { *m = ChainInventory{} }
func (m *ChainInventory) String() string            { return proto.CompactTextString(m) }
func (*ChainInventory) ProtoMessage()               {}
func (*ChainInventory) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

func (m *ChainInventory) GetIds() []*ChainInventory_BlockId {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *ChainInventory) GetRemainNum() int64 {
	if m != nil {
		return m.RemainNum
	}
	return 0
}

type ChainInventory_BlockId struct {
	Hash   []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Number int64  `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
}

func (m *ChainInventory_BlockId) Reset()                    { *m = ChainInventory_BlockId{} }
func (m *ChainInventory_BlockId) String() string            { return proto.CompactTextString(m) }
func (*ChainInventory_BlockId) ProtoMessage()               {}
func (*ChainInventory_BlockId) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14, 0} }

func (m *ChainInventory_BlockId) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ChainInventory_BlockId) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

// Inventory
type BlockInventory struct {
	Ids  []*BlockInventory_BlockId `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	Type BlockInventory_Type       `protobuf:"varint,2,opt,name=type,enum=protocol.BlockInventory_Type" json:"type,omitempty"`
}

func (m *BlockInventory) Reset()                    { *m = BlockInventory{} }
func (m *BlockInventory) String() string            { return proto.CompactTextString(m) }
func (*BlockInventory) ProtoMessage()               {}
func (*BlockInventory) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

func (m *BlockInventory) GetIds() []*BlockInventory_BlockId {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *BlockInventory) GetType() BlockInventory_Type {
	if m != nil {
		return m.Type
	}
	return BlockInventory_SYNC
}

type BlockInventory_BlockId struct {
	Hash   []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Number int64  `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
}

func (m *BlockInventory_BlockId) Reset()                    { *m = BlockInventory_BlockId{} }
func (m *BlockInventory_BlockId) String() string            { return proto.CompactTextString(m) }
func (*BlockInventory_BlockId) ProtoMessage()               {}
func (*BlockInventory_BlockId) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15, 0} }

func (m *BlockInventory_BlockId) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *BlockInventory_BlockId) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type Inventory struct {
	Type Inventory_InventoryType `protobuf:"varint,1,opt,name=type,enum=protocol.Inventory_InventoryType" json:"type,omitempty"`
	Ids  [][]byte                `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (m *Inventory) Reset()                    { *m = Inventory{} }
func (m *Inventory) String() string            { return proto.CompactTextString(m) }
func (*Inventory) ProtoMessage()               {}
func (*Inventory) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

func (m *Inventory) GetType() Inventory_InventoryType {
	if m != nil {
		return m.Type
	}
	return Inventory_TRX
}

func (m *Inventory) GetIds() [][]byte {
	if m != nil {
		return m.Ids
	}
	return nil
}

type Items struct {
	Type         Items_ItemType `protobuf:"varint,1,opt,name=type,enum=protocol.Items_ItemType" json:"type,omitempty"`
	Blocks       []*Block       `protobuf:"bytes,2,rep,name=blocks" json:"blocks,omitempty"`
	BlockHeaders []*BlockHeader `protobuf:"bytes,3,rep,name=block_headers,json=blockHeaders" json:"block_headers,omitempty"`
	Transactions []*Transaction `protobuf:"bytes,4,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *Items) Reset()                    { *m = Items{} }
func (m *Items) String() string            { return proto.CompactTextString(m) }
func (*Items) ProtoMessage()               {}
func (*Items) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{17} }

func (m *Items) GetType() Items_ItemType {
	if m != nil {
		return m.Type
	}
	return Items_ERR
}

func (m *Items) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func (m *Items) GetBlockHeaders() []*BlockHeader {
	if m != nil {
		return m.BlockHeaders
	}
	return nil
}

func (m *Items) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

// DynamicProperties
type DynamicProperties struct {
	LastSolidityBlockNum int64 `protobuf:"varint,1,opt,name=last_solidity_block_num,json=lastSolidityBlockNum" json:"last_solidity_block_num,omitempty"`
}

func (m *DynamicProperties) Reset()                    { *m = DynamicProperties{} }
func (m *DynamicProperties) String() string            { return proto.CompactTextString(m) }
func (*DynamicProperties) ProtoMessage()               {}
func (*DynamicProperties) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{18} }

func (m *DynamicProperties) GetLastSolidityBlockNum() int64 {
	if m != nil {
		return m.LastSolidityBlockNum
	}
	return 0
}

type DisconnectMessage struct {
	Reason ReasonCode `protobuf:"varint,1,opt,name=reason,enum=protocol.ReasonCode" json:"reason,omitempty"`
}

func (m *DisconnectMessage) Reset()                    { *m = DisconnectMessage{} }
func (m *DisconnectMessage) String() string            { return proto.CompactTextString(m) }
func (*DisconnectMessage) ProtoMessage()               {}
func (*DisconnectMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{19} }

func (m *DisconnectMessage) GetReason() ReasonCode {
	if m != nil {
		return m.Reason
	}
	return ReasonCode_REQUESTED
}

type HelloMessage struct {
	From           *Endpoint             `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	Version        int32                 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	Timestamp      int64                 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	GenesisBlockId *HelloMessage_BlockId `protobuf:"bytes,4,opt,name=genesisBlockId" json:"genesisBlockId,omitempty"`
	SolidBlockId   *HelloMessage_BlockId `protobuf:"bytes,5,opt,name=solidBlockId" json:"solidBlockId,omitempty"`
	HeadBlockId    *HelloMessage_BlockId `protobuf:"bytes,6,opt,name=headBlockId" json:"headBlockId,omitempty"`
}

func (m *HelloMessage) Reset()                    { *m = HelloMessage{} }
func (m *HelloMessage) String() string            { return proto.CompactTextString(m) }
func (*HelloMessage) ProtoMessage()               {}
func (*HelloMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{20} }

func (m *HelloMessage) GetFrom() *Endpoint {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *HelloMessage) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *HelloMessage) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *HelloMessage) GetGenesisBlockId() *HelloMessage_BlockId {
	if m != nil {
		return m.GenesisBlockId
	}
	return nil
}

func (m *HelloMessage) GetSolidBlockId() *HelloMessage_BlockId {
	if m != nil {
		return m.SolidBlockId
	}
	return nil
}

func (m *HelloMessage) GetHeadBlockId() *HelloMessage_BlockId {
	if m != nil {
		return m.HeadBlockId
	}
	return nil
}

type HelloMessage_BlockId struct {
	Hash   []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Number int64  `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
}

func (m *HelloMessage_BlockId) Reset()                    { *m = HelloMessage_BlockId{} }
func (m *HelloMessage_BlockId) String() string            { return proto.CompactTextString(m) }
func (*HelloMessage_BlockId) ProtoMessage()               {}
func (*HelloMessage_BlockId) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{20, 0} }

func (m *HelloMessage_BlockId) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *HelloMessage_BlockId) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func init() {
	proto.RegisterType((*AccountId)(nil), "protocol.AccountId")
	proto.RegisterType((*Vote)(nil), "protocol.Vote")
	proto.RegisterType((*Account)(nil), "protocol.Account")
	proto.RegisterType((*Account_Frozen)(nil), "protocol.Account.Frozen")
	proto.RegisterType((*Acuthrity)(nil), "protocol.acuthrity")
	proto.RegisterType((*Permision)(nil), "protocol.permision")
	proto.RegisterType((*Witness)(nil), "protocol.Witness")
	proto.RegisterType((*Votes)(nil), "protocol.Votes")
	proto.RegisterType((*TXOutput)(nil), "protocol.TXOutput")
	proto.RegisterType((*TXInput)(nil), "protocol.TXInput")
	proto.RegisterType((*TXInputRaw)(nil), "protocol.TXInput.raw")
	proto.RegisterType((*TXOutputs)(nil), "protocol.TXOutputs")
	proto.RegisterType((*Transaction)(nil), "protocol.Transaction")
	proto.RegisterType((*Transaction_Contract)(nil), "protocol.Transaction.Contract")
	proto.RegisterType((*Transaction_Result)(nil), "protocol.Transaction.Result")
	proto.RegisterType((*TransactionRaw)(nil), "protocol.Transaction.raw")
	proto.RegisterType((*Transactions)(nil), "protocol.Transactions")
	proto.RegisterType((*BlockHeader)(nil), "protocol.BlockHeader")
	proto.RegisterType((*BlockHeaderRaw)(nil), "protocol.BlockHeader.raw")
	proto.RegisterType((*Block)(nil), "protocol.Block")
	proto.RegisterType((*ChainInventory)(nil), "protocol.ChainInventory")
	proto.RegisterType((*ChainInventory_BlockId)(nil), "protocol.ChainInventory.BlockId")
	proto.RegisterType((*BlockInventory)(nil), "protocol.BlockInventory")
	proto.RegisterType((*BlockInventory_BlockId)(nil), "protocol.BlockInventory.BlockId")
	proto.RegisterType((*Inventory)(nil), "protocol.Inventory")
	proto.RegisterType((*Items)(nil), "protocol.Items")
	proto.RegisterType((*DynamicProperties)(nil), "protocol.DynamicProperties")
	proto.RegisterType((*DisconnectMessage)(nil), "protocol.DisconnectMessage")
	proto.RegisterType((*HelloMessage)(nil), "protocol.HelloMessage")
	proto.RegisterType((*HelloMessage_BlockId)(nil), "protocol.HelloMessage.BlockId")
	proto.RegisterEnum("protocol.AccountType", AccountType_name, AccountType_value)
	proto.RegisterEnum("protocol.ReasonCode", ReasonCode_name, ReasonCode_value)
	proto.RegisterEnum("protocol.Transaction_Contract_ContractType", Transaction_Contract_ContractType_name, Transaction_Contract_ContractType_value)
	proto.RegisterEnum("protocol.Transaction_ResultCode", Transaction_ResultCode_name, Transaction_ResultCode_value)
	proto.RegisterEnum("protocol.BlockInventory_Type", BlockInventory_Type_name, BlockInventory_Type_value)
	proto.RegisterEnum("protocol.Inventory_InventoryType", Inventory_InventoryType_name, Inventory_InventoryType_value)
	proto.RegisterEnum("protocol.Items_ItemType", Items_ItemType_name, Items_ItemType_value)
}

func init() { proto.RegisterFile("core/Tron.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 2446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0xdd, 0x72, 0xdb, 0xc6,
	0xf5, 0x17, 0x49, 0xf1, 0xeb, 0x90, 0xa2, 0xa0, 0xb5, 0x64, 0xd3, 0x8a, 0x9d, 0xd8, 0xf8, 0xe7,
	0xc3, 0x89, 0x13, 0x2a, 0x7f, 0xa5, 0x99, 0x38, 0x9e, 0xe9, 0x34, 0x14, 0x09, 0x47, 0x88, 0x64,
	0x52, 0x01, 0x41, 0xc7, 0xee, 0x0d, 0x07, 0x02, 0x57, 0x12, 0x26, 0x24, 0xc0, 0x01, 0x96, 0x92,
	0x99, 0xf6, 0x05, 0x7a, 0xd5, 0xe9, 0x65, 0x7b, 0xd5, 0xab, 0x3e, 0x42, 0x5f, 0xa0, 0x17, 0x9d,
	0xe9, 0x13, 0x74, 0xa6, 0x8f, 0xd1, 0x07, 0x68, 0xe7, 0x9c, 0x5d, 0x10, 0x80, 0x24, 0x3b, 0x71,
	0x7a, 0x23, 0xed, 0x9e, 0xaf, 0x3d, 0xe7, 0xec, 0xd9, 0xdf, 0x39, 0x20, 0xac, 0xbb, 0x41, 0xc8,
	0x77, 0xec, 0x30, 0xf0, 0x5b, 0xb3, 0x30, 0x10, 0x01, 0xab, 0xd0, 0x3f, 0x37, 0x98, 0x6c, 0xdf,
	0x3e, 0x0d, 0x82, 0xd3, 0x09, 0xdf, 0x21, 0xc2, 0xf1, 0xfc, 0x64, 0xc7, 0xf1, 0x17, 0x52, 0x68,
	0xfb, 0x06, 0x69, 0x75, 0xbd, 0xc8, 0x0d, 0xce, 0x79, 0x28, 0x89, 0xfa, 0x97, 0x50, 0x6d, 0xbb,
	0x6e, 0x30, 0xf7, 0x85, 0x39, 0x66, 0x0c, 0x56, 0x7d, 0x67, 0xca, 0x9b, 0xb9, 0x7b, 0xb9, 0x07,
	0x75, 0x8b, 0xd6, 0xac, 0x09, 0x65, 0x67, 0x3c, 0x0e, 0x79, 0x14, 0x35, 0xf3, 0x44, 0x8e, 0xb7,
	0xfa, 0x3e, 0xac, 0x3e, 0x0b, 0x04, 0x67, 0xf7, 0xa1, 0x7e, 0x1e, 0x08, 0x3e, 0x8a, 0xc5, 0xa4,
	0x76, 0x0d, 0x69, 0x6d, 0x49, 0x62, 0x77, 0x01, 0x48, 0x84, 0x0e, 0x22, 0x3b, 0x05, 0xab, 0x8a,
	0x94, 0x0e, 0x12, 0xf4, 0x3f, 0x00, 0x94, 0x95, 0x17, 0x68, 0xcd, 0x91, 0xcb, 0x51, 0xca, 0x97,
	0x9a, 0xa2, 0xf5, 0xd0, 0xa5, 0x0f, 0x61, 0x55, 0x2c, 0x66, 0x9c, 0xec, 0x34, 0x76, 0xb7, 0x5a,
	0x71, 0xf0, 0x2d, 0x65, 0xc3, 0x5e, 0xcc, 0xb8, 0x45, 0x22, 0x69, 0xef, 0x0b, 0x19, 0xef, 0x91,
	0x73, 0xec, 0x4c, 0x1c, 0xdf, 0xe5, 0xcd, 0x55, 0xf2, 0x27, 0xde, 0xb2, 0x77, 0xa1, 0x88, 0xae,
	0x45, 0xcd, 0xe2, 0xbd, 0xc2, 0x83, 0xda, 0x6e, 0x23, 0xb1, 0x8f, 0xe1, 0x5a, 0x92, 0xc9, 0x76,
	0xa1, 0xe8, 0x44, 0x11, 0x17, 0xcd, 0x12, 0x49, 0xdd, 0xb9, 0xe2, 0x45, 0xab, 0x8d, 0x6c, 0xc3,
	0x17, 0xe1, 0xc2, 0x92, 0xa2, 0xec, 0x53, 0x28, 0x9d, 0x84, 0xc1, 0x0f, 0xdc, 0x6f, 0x96, 0x49,
	0xa9, 0x79, 0x55, 0xe9, 0x09, 0xf1, 0x2d, 0x25, 0xc7, 0xde, 0x82, 0xaa, 0xcf, 0xc5, 0x68, 0x1e,
	0x39, 0xa7, 0xbc, 0x59, 0x21, 0x3f, 0x2b, 0x3e, 0x17, 0x43, 0xdc, 0xb3, 0x77, 0xa0, 0xe6, 0x86,
	0xdc, 0x11, 0x7c, 0x24, 0xbc, 0x29, 0x6f, 0x56, 0x89, 0x0d, 0x92, 0x64, 0x7b, 0x53, 0xce, 0x3e,
	0x85, 0xcd, 0x89, 0x23, 0x78, 0x24, 0x46, 0xc1, 0x2c, 0x74, 0x84, 0x17, 0xf8, 0x52, 0x12, 0x48,
	0x92, 0x49, 0x5e, 0x5f, 0xb1, 0x48, 0xe3, 0x0e, 0x54, 0x9d, 0xc9, 0x24, 0xb8, 0xa0, 0xbc, 0xd4,
	0xe4, 0x3d, 0x2d, 0x09, 0x29, 0x7b, 0x17, 0x9e, 0x38, 0x1b, 0x87, 0xce, 0x85, 0xb4, 0x57, 0x4f,
	0xdb, 0xfb, 0x4e, 0xb1, 0xc8, 0x1e, 0x83, 0x55, 0x37, 0x18, 0xf3, 0xe6, 0x9a, 0xac, 0x28, 0x5c,
	0x63, 0x31, 0x78, 0x11, 0x5a, 0xf0, 0xf1, 0x5a, 0x1a, 0xf7, 0x72, 0x0f, 0x2a, 0x56, 0xd5, 0x8b,
	0xbe, 0x93, 0x04, 0x2c, 0x00, 0x2f, 0x1a, 0xb9, 0xc1, 0x74, 0xea, 0x09, 0xc1, 0x79, 0x73, 0x9d,
	0x04, 0x6a, 0x5e, 0xd4, 0x89, 0x49, 0xec, 0x97, 0xb0, 0x26, 0xf3, 0x33, 0x8a, 0xe6, 0xb3, 0xd9,
	0x64, 0xd1, 0xd4, 0x7e, 0x24, 0x9d, 0x75, 0x29, 0x3e, 0x20, 0x69, 0xf6, 0x11, 0x6c, 0xd0, 0x7d,
	0x8c, 0xbc, 0x28, 0x9a, 0xf3, 0xb1, 0xac, 0xb3, 0x0d, 0xf2, 0x70, 0x9d, 0x18, 0x26, 0xd1, 0xa9,
	0xd6, 0x7c, 0x78, 0x4b, 0x85, 0x2c, 0x55, 0x82, 0x19, 0x4f, 0x67, 0x92, 0xd1, 0xc1, 0x3b, 0x57,
	0x0f, 0x3e, 0x24, 0x25, 0x2a, 0x81, 0x7e, 0xac, 0x82, 0x19, 0x91, 0xf5, 0xd0, 0x9c, 0xbc, 0x82,
	0xcd, 0xde, 0x85, 0xc6, 0x49, 0xc8, 0xf9, 0x28, 0xb9, 0xf5, 0x1b, 0x94, 0xdc, 0x3a, 0x52, 0x7b,
	0xf1, 0xcd, 0xbf, 0x80, 0x4d, 0x92, 0x92, 0x3e, 0x25, 0xb2, 0x9b, 0xe4, 0xce, 0x83, 0xeb, 0xf2,
	0xc0, 0x39, 0x9d, 0x16, 0x9b, 0x90, 0x7e, 0x6c, 0x9c, 0x5c, 0xa6, 0xb3, 0x16, 0xdc, 0x50, 0x01,
	0xbb, 0x81, 0x1f, 0xcd, 0xa7, 0xaa, 0xb8, 0xb6, 0xc8, 0x8b, 0x0d, 0xc9, 0xea, 0x48, 0x0e, 0x39,
	0xfc, 0x05, 0x34, 0x2f, 0xc9, 0x93, 0x67, 0xa4, 0x74, 0x93, 0x94, 0xb6, 0x32, 0x4a, 0xe8, 0x09,
	0x2a, 0x6e, 0x1f, 0x41, 0x49, 0xde, 0x0e, 0x7b, 0x0f, 0x63, 0xa6, 0xeb, 0x8c, 0x5f, 0x64, 0x8e,
	0x14, 0xd5, 0x25, 0xef, 0xa9, 0x77, 0xf9, 0x0e, 0xd4, 0xf8, 0xcb, 0x99, 0x17, 0x2a, 0xe3, 0x12,
	0x45, 0x40, 0x92, 0xc8, 0xe2, 0x23, 0x80, 0xe4, 0xcd, 0x31, 0x0d, 0x0a, 0xdf, 0xf3, 0x05, 0x99,
	0xaa, 0x5a, 0xb8, 0x64, 0x9b, 0x50, 0x3c, 0x77, 0x26, 0xf3, 0x58, 0x55, 0x6e, 0x1e, 0xe7, 0x1f,
	0xe5, 0xb6, 0x0f, 0xe0, 0xee, 0x6b, 0x2f, 0xec, 0x8d, 0x8c, 0x75, 0xe1, 0xe6, 0xf5, 0xe9, 0x7e,
	0x13, 0x2b, 0xba, 0x0b, 0x55, 0xc7, 0x9d, 0x8b, 0xb3, 0xd0, 0x13, 0x0b, 0xf6, 0x09, 0x94, 0x15,
	0x00, 0x92, 0x72, 0x6d, 0xf7, 0xc6, 0x95, 0x2b, 0x36, 0xc7, 0x56, 0x2c, 0xc3, 0x3e, 0x80, 0xf5,
	0x19, 0x0f, 0xa7, 0x5e, 0x14, 0x61, 0xa1, 0x52, 0x79, 0x4b, 0xec, 0x6e, 0x24, 0x64, 0xac, 0x6e,
	0xfd, 0x31, 0x54, 0x25, 0xc5, 0x0b, 0xfc, 0x37, 0x3c, 0x44, 0xff, 0x63, 0x1e, 0xca, 0xf1, 0x9b,
	0x4d, 0xc1, 0x6c, 0x2e, 0x0b, 0xb3, 0x77, 0x20, 0xc1, 0xf9, 0x2b, 0xc0, 0xcf, 0x6e, 0x42, 0x69,
	0x36, 0x3f, 0x3e, 0xe0, 0x0b, 0x85, 0xce, 0x6a, 0x87, 0x89, 0x9a, 0x87, 0x13, 0x02, 0xe6, 0xaa,
	0x85, 0x4b, 0xf6, 0x2e, 0xac, 0x89, 0x40, 0x38, 0x93, 0xa3, 0x30, 0x18, 0xcf, 0x5d, 0x3e, 0x6e,
	0x16, 0x65, 0x89, 0x64, 0x88, 0xec, 0x1e, 0xd4, 0x88, 0xf0, 0xd4, 0x8b, 0x22, 0x3e, 0x6e, 0x96,
	0x48, 0x26, 0x4d, 0x62, 0xef, 0x43, 0x43, 0x96, 0xe3, 0xde, 0x24, 0x70, 0xbf, 0xef, 0xcd, 0xa7,
	0xcd, 0x32, 0x09, 0x5d, 0xa2, 0xe2, 0x79, 0x92, 0x32, 0x98, 0x04, 0x02, 0xc5, 0x24, 0xf8, 0x66,
	0x89, 0xe8, 0xbf, 0x17, 0x7d, 0x13, 0x1c, 0x47, 0x04, 0xbe, 0x15, 0x4b, 0xed, 0xf4, 0xdf, 0x40,
	0xf1, 0x19, 0x75, 0x89, 0x57, 0x27, 0xe6, 0x21, 0x54, 0x83, 0xc9, 0x78, 0x24, 0x3b, 0x4d, 0xfe,
	0xda, 0x4e, 0x53, 0x09, 0x26, 0x63, 0x69, 0xe6, 0x21, 0xb6, 0x81, 0x0b, 0x25, 0x5c, 0xb8, 0x5e,
	0xd8, 0xe7, 0x17, 0x24, 0xac, 0x7f, 0x05, 0x15, 0xfb, 0x79, 0x7f, 0x2e, 0x66, 0x73, 0x91, 0xd4,
	0x57, 0x2e, 0x55, 0x5f, 0xec, 0x6d, 0x00, 0x99, 0xe8, 0x7d, 0x27, 0x3a, 0x53, 0xa5, 0x91, 0xa2,
	0xe8, 0x7f, 0xce, 0x41, 0xd9, 0x7e, 0x6e, 0xfa, 0x68, 0xe1, 0x53, 0xa8, 0x20, 0xce, 0x8f, 0x1d,
	0xe1, 0xa8, 0xb2, 0x48, 0x35, 0x5c, 0x25, 0xd4, 0x0a, 0x9d, 0x0b, 0xab, 0x1c, 0x3a, 0x17, 0x5d,
	0x47, 0x38, 0x78, 0xe5, 0x91, 0x77, 0xea, 0x3b, 0x62, 0x1e, 0xca, 0xde, 0x5a, 0xb7, 0x12, 0xc2,
	0xb6, 0x01, 0x85, 0xd0, 0xb9, 0xc0, 0xc6, 0x20, 0x5e, 0x9a, 0xdd, 0x78, 0xd4, 0xc0, 0x35, 0xd2,
	0xce, 0x83, 0x79, 0x5c, 0x26, 0xb4, 0x7e, 0x55, 0x85, 0xe0, 0xdc, 0x12, 0x07, 0x19, 0xb1, 0x8f,
	0xa1, 0x1c, 0xc8, 0x65, 0x33, 0x47, 0xc9, 0x61, 0x69, 0x17, 0xa5, 0x94, 0x15, 0x8b, 0xe8, 0xff,
	0xaa, 0x42, 0xcd, 0x0e, 0x1d, 0x3f, 0x72, 0x5c, 0x7c, 0xe4, 0xec, 0x17, 0x57, 0x22, 0xbc, 0x9d,
	0x52, 0x4f, 0x04, 0x5f, 0x13, 0x25, 0xde, 0x5f, 0x3a, 0x4a, 0xd6, 0x82, 0x42, 0xc8, 0x85, 0x9a,
	0x20, 0xee, 0x5c, 0x6f, 0xce, 0xe2, 0xd1, 0x7c, 0x22, 0x2c, 0x14, 0xdc, 0xfe, 0x5d, 0x11, 0x2a,
	0x9d, 0xc0, 0x17, 0xa1, 0xe3, 0x0a, 0xf6, 0x2b, 0x35, 0xdf, 0xe4, 0x68, 0xbe, 0x79, 0x78, 0xbd,
	0x76, 0x2c, 0xbd, 0x5c, 0xa4, 0xa6, 0x9e, 0x5d, 0xa8, 0xce, 0x9c, 0xd0, 0x99, 0x72, 0xc1, 0x43,
	0xca, 0x66, 0x6d, 0x77, 0xb3, 0x25, 0x07, 0xc3, 0x56, 0x3c, 0x18, 0xb6, 0xda, 0xfe, 0xc2, 0x4a,
	0xc4, 0xd8, 0x36, 0xe0, 0x10, 0x79, 0xee, 0x8d, 0x79, 0xa8, 0x52, 0xbd, 0xdc, 0x33, 0x1d, 0xea,
	0xf1, 0x29, 0x08, 0x1b, 0xea, 0x52, 0x33, 0x34, 0xfd, 0xef, 0x85, 0x44, 0x08, 0x5d, 0x61, 0xb7,
	0x61, 0x4b, 0xa1, 0x46, 0x87, 0x26, 0x92, 0x98, 0xa9, 0xad, 0xb0, 0x4d, 0xd0, 0x28, 0x94, 0x13,
	0x1e, 0x2e, 0xa9, 0x39, 0x54, 0x88, 0xa9, 0x84, 0x9d, 0x4b, 0x56, 0x9e, 0x6d, 0xc1, 0x06, 0xd6,
	0x76, 0x96, 0x5c, 0x60, 0xb7, 0xe0, 0x06, 0x92, 0x15, 0x0a, 0x2d, 0x19, 0xab, 0x68, 0x2a, 0x26,
	0x66, 0xcf, 0x2e, 0xb2, 0x9b, 0xc0, 0xda, 0xcb, 0x1e, 0xbf, 0xa4, 0x97, 0x18, 0x83, 0x46, 0x97,
	0xcf, 0x26, 0xc1, 0x62, 0x49, 0x2b, 0xa7, 0xcc, 0x0c, 0x67, 0xe3, 0xb4, 0x99, 0x0a, 0xbb, 0x0f,
	0x77, 0x8f, 0x9c, 0x50, 0x78, 0xae, 0x37, 0x73, 0x94, 0x63, 0x59, 0x8b, 0xd5, 0x54, 0x02, 0x2e,
	0x69, 0x03, 0xb2, 0xb0, 0x45, 0xfc, 0xc0, 0x55, 0x6f, 0x5b, 0xb2, 0x6a, 0xec, 0x2d, 0xb8, 0x35,
	0xf4, 0x4f, 0xae, 0x65, 0xd6, 0x91, 0x19, 0x8f, 0x57, 0x97, 0x99, 0x6b, 0x68, 0x34, 0xd6, 0xcc,
	0x26, 0xaa, 0x81, 0x89, 0x92, 0x3e, 0x64, 0x19, 0xeb, 0x18, 0x75, 0x67, 0x1e, 0x89, 0x60, 0xba,
	0xa4, 0x6d, 0x6e, 0x07, 0x50, 0x92, 0xa5, 0x89, 0x30, 0x7c, 0xc2, 0x63, 0xec, 0xc0, 0x25, 0xfb,
	0x4c, 0xd6, 0xb5, 0x9c, 0xbc, 0xef, 0xbf, 0xae, 0xae, 0x5b, 0x38, 0xeb, 0x51, 0x71, 0xeb, 0x6f,
	0xcb, 0x21, 0x90, 0x01, 0x94, 0x06, 0xc3, 0x8e, 0x31, 0x18, 0x68, 0x2b, 0xb8, 0x7e, 0xd2, 0x36,
	0x0f, 0x8d, 0xae, 0x96, 0xdb, 0xfe, 0x47, 0x5e, 0x62, 0xc2, 0xfb, 0xb0, 0x1e, 0xf2, 0x93, 0xd1,
	0x31, 0x62, 0xf0, 0xe8, 0x78, 0x81, 0x58, 0x27, 0xe1, 0x61, 0x2d, 0xe4, 0x27, 0x84, 0xcc, 0x7b,
	0x48, 0x64, 0x3a, 0xac, 0x25, 0x72, 0xfe, 0x7c, 0x4a, 0xf5, 0x5a, 0xb0, 0x6a, 0xb1, 0x94, 0xc4,
	0xef, 0x46, 0x22, 0x73, 0x86, 0x30, 0xa7, 0x8a, 0x36, 0x16, 0x42, 0xa0, 0x43, 0x20, 0xa4, 0xf9,
	0x81, 0xba, 0xbd, 0x82, 0xf8, 0x14, 0x85, 0x7d, 0x08, 0x45, 0x67, 0x2e, 0xce, 0x10, 0xde, 0x0b,
	0xd9, 0x86, 0xb8, 0xec, 0xcd, 0x96, 0x94, 0x40, 0xf0, 0x22, 0x04, 0x01, 0x09, 0x68, 0xb8, 0x66,
	0x8f, 0xa1, 0xe2, 0xaa, 0xbc, 0x36, 0x6b, 0x64, 0xe1, 0xed, 0xd7, 0x3f, 0x66, 0x6b, 0x29, 0x8f,
	0x9d, 0x23, 0x72, 0x43, 0x6f, 0x26, 0x22, 0x1a, 0xaf, 0xeb, 0x56, 0xbc, 0x45, 0xe4, 0xc1, 0x01,
	0x28, 0x12, 0xce, 0x74, 0x46, 0xe3, 0x73, 0xc1, 0x4a, 0x08, 0xba, 0x09, 0xf5, 0x94, 0xe5, 0x88,
	0x7d, 0x09, 0x75, 0x91, 0xda, 0x2b, 0x80, 0xdc, 0xba, 0xd6, 0x0f, 0x2b, 0x23, 0xaa, 0xff, 0x35,
	0x0f, 0x35, 0x99, 0x2b, 0xee, 0x20, 0x0c, 0xbc, 0x16, 0x28, 0x53, 0x82, 0x59, 0xa0, 0x7c, 0x08,
	0x1b, 0x6a, 0xd6, 0x1f, 0xa5, 0x01, 0x13, 0x43, 0xd2, 0x14, 0x63, 0xb0, 0xec, 0x0e, 0x7f, 0xcb,
	0xc9, 0x52, 0xc8, 0xc4, 0x98, 0xbb, 0x14, 0x23, 0x5e, 0x9b, 0x78, 0x69, 0x87, 0x1e, 0xb7, 0x82,
	0x40, 0xc4, 0xfd, 0x2b, 0xa1, 0x50, 0x7f, 0x73, 0x42, 0xee, 0x0b, 0xea, 0x6f, 0x05, 0xd5, 0xdf,
	0x96, 0x14, 0x6c, 0x2a, 0xfe, 0x7c, 0x7a, 0xcc, 0x43, 0xd5, 0xfc, 0xd5, 0x0e, 0xbf, 0x4c, 0x62,
	0x57, 0xbd, 0xb1, 0x2a, 0x87, 0xaa, 0xa2, 0x98, 0x63, 0x1c, 0xab, 0x62, 0x76, 0xdc, 0xd4, 0xab,
	0x72, 0xac, 0x52, 0x64, 0xf5, 0xb9, 0xab, 0xff, 0x16, 0x8a, 0x94, 0x8e, 0xff, 0x21, 0xf9, 0xec,
	0x11, 0xd4, 0x55, 0xf1, 0x52, 0x4e, 0x15, 0x8c, 0x6f, 0x5d, 0x9b, 0x70, 0xab, 0x76, 0x9c, 0x6c,
	0xf4, 0x3f, 0xe5, 0xa0, 0xd1, 0x39, 0x73, 0x3c, 0xdf, 0xf4, 0xcf, 0xb9, 0x2f, 0x82, 0x70, 0xc1,
	0x76, 0xa1, 0xe0, 0x8d, 0xe3, 0xe3, 0xef, 0x25, 0x36, 0xb2, 0x62, 0xd2, 0xa4, 0x39, 0xb6, 0x50,
	0x18, 0x93, 0x11, 0xf2, 0xa9, 0xe3, 0xf9, 0xf4, 0xc4, 0xd4, 0xe8, 0x26, 0x29, 0xbd, 0xf9, 0x74,
	0xfb, 0x73, 0x28, 0x2b, 0x71, 0x2c, 0x7d, 0x7a, 0x61, 0xaa, 0x97, 0x9f, 0x65, 0x53, 0x9c, 0x4f,
	0xa7, 0x58, 0xff, 0x67, 0x0e, 0x1a, 0x52, 0xef, 0x47, 0x9d, 0xcb, 0x8a, 0x65, 0x9d, 0xfb, 0xff,
	0xcc, 0x4f, 0x00, 0x77, 0x5f, 0xa9, 0x94, 0x34, 0xc5, 0x9f, 0xeb, 0xf0, 0x03, 0x58, 0xa5, 0x76,
	0x56, 0x81, 0xd5, 0xc1, 0x8b, 0x5e, 0x47, 0x5b, 0x61, 0x35, 0x28, 0xb7, 0xbb, 0xcf, 0x6c, 0x73,
	0x60, 0x68, 0x39, 0x56, 0x85, 0xe2, 0x13, 0xc3, 0xee, 0xec, 0x6b, 0x79, 0x7d, 0x01, 0xd5, 0x24,
	0xa8, 0xcf, 0x33, 0x3d, 0x3c, 0x85, 0x94, 0x89, 0x6f, 0xcb, 0x55, 0xaa, 0x73, 0x6b, 0x32, 0x17,
	0x72, 0x9e, 0xc0, 0xa5, 0xfe, 0x7f, 0xb0, 0x96, 0x11, 0x64, 0x65, 0x28, 0xd8, 0xd6, 0x73, 0x6d,
	0x05, 0x8f, 0xde, 0x3b, 0xec, 0x77, 0x0e, 0xb4, 0x9c, 0xfe, 0xfb, 0x3c, 0x14, 0x4d, 0xc1, 0xa7,
	0x38, 0x0a, 0xa5, 0xcf, 0x4d, 0x7d, 0x11, 0x13, 0x9b, 0xfe, 0xa6, 0x8e, 0xfb, 0x00, 0x4a, 0x54,
	0x39, 0xf1, 0x04, 0xba, 0x7e, 0x29, 0x91, 0x96, 0x62, 0xb3, 0xc7, 0xb0, 0x96, 0xae, 0xc6, 0x78,
	0x08, 0x7d, 0x45, 0x39, 0xd6, 0x53, 0xe5, 0x78, 0x15, 0x81, 0x56, 0x7f, 0x3a, 0x02, 0x3d, 0x82,
	0x4a, 0xec, 0x31, 0xc6, 0x6d, 0x58, 0x96, 0xb6, 0x12, 0x27, 0x20, 0x97, 0x24, 0x20, 0xcf, 0xd6,
	0xa1, 0x46, 0xcb, 0x7d, 0xa3, 0xdd, 0x35, 0x2c, 0xad, 0xa0, 0x7f, 0x03, 0x1b, 0xdd, 0x85, 0xef,
	0x4c, 0x3d, 0xf7, 0x28, 0xc4, 0x6f, 0x76, 0xe1, 0xf1, 0x88, 0x7d, 0x0e, 0xb7, 0x26, 0x4e, 0x24,
	0x46, 0x51, 0x30, 0xf1, 0xc6, 0x9e, 0x58, 0xa4, 0x5a, 0x88, 0xc4, 0x98, 0x4d, 0x64, 0x0f, 0x14,
	0x37, 0xee, 0x25, 0x7a, 0x1b, 0x36, 0xe8, 0x57, 0x33, 0xdf, 0xe7, 0xae, 0x78, 0xca, 0x23, 0xfa,
	0x4e, 0xfe, 0x18, 0x4a, 0x21, 0x77, 0xa2, 0xc0, 0x57, 0xa9, 0xde, 0x4c, 0xe2, 0xb1, 0x88, 0xde,
	0xc1, 0xfe, 0xa7, 0x64, 0xf4, 0x7f, 0xe7, 0xa1, 0xbe, 0xcf, 0x27, 0x93, 0x20, 0x56, 0x7f, 0x1f,
	0x56, 0x4f, 0xc2, 0x60, 0xaa, 0x70, 0x34, 0x35, 0xaf, 0x1a, 0xfe, 0x78, 0x16, 0x78, 0xbe, 0xb0,
	0x88, 0x8f, 0x6d, 0xe0, 0x9c, 0x87, 0xf8, 0x7d, 0x46, 0x75, 0x59, 0xb4, 0xe2, 0x6d, 0x16, 0x22,
	0x0b, 0x97, 0x21, 0xf2, 0x09, 0x34, 0x4e, 0xb9, 0xcf, 0x23, 0x2f, 0x52, 0x45, 0x4f, 0xfd, 0x2f,
	0xd3, 0x80, 0xd2, 0xfe, 0x2c, 0x5f, 0xd7, 0x25, 0x2d, 0xb6, 0x07, 0x75, 0xca, 0x56, 0x6c, 0xa5,
	0xf8, 0x93, 0xac, 0x64, 0x74, 0xd8, 0x57, 0x50, 0xc3, 0xb2, 0x89, 0x4d, 0x94, 0x7e, 0x92, 0x89,
	0xb4, 0xca, 0xcf, 0x7c, 0xbb, 0x1f, 0x7d, 0x01, 0xb5, 0xd4, 0x4f, 0x82, 0x38, 0x73, 0xf4, 0x82,
	0x70, 0xea, 0x4c, 0xb4, 0x15, 0xd6, 0x50, 0xbf, 0x15, 0xd0, 0xd0, 0xa6, 0xe5, 0x58, 0x3d, 0x99,
	0xbf, 0xb5, 0xfc, 0x47, 0x7f, 0x29, 0x00, 0x24, 0xb7, 0xc8, 0xd6, 0xa0, 0x6a, 0x19, 0xdf, 0x0e,
	0x8d, 0x81, 0x6d, 0x74, 0xb5, 0x15, 0xa6, 0x41, 0x7d, 0xaf, 0xdd, 0x1d, 0x1d, 0x59, 0x7d, 0xbb,
	0xdf, 0xe9, 0x1f, 0x6a, 0x79, 0x1c, 0xa3, 0xec, 0x7e, 0x7f, 0xf4, 0xb4, 0xdd, 0x7b, 0x31, 0x3a,
	0x32, 0x0c, 0x6b, 0xa0, 0xad, 0xd2, 0x40, 0x39, 0x3c, 0x3a, 0x34, 0x3b, 0x6d, 0xdb, 0x20, 0xa2,
	0x56, 0xc4, 0x11, 0xcd, 0xec, 0x75, 0xfa, 0x4f, 0x8f, 0xda, 0xb6, 0xb9, 0x77, 0x68, 0x24, 0x26,
	0x4a, 0x6c, 0x03, 0xd6, 0x7a, 0xc3, 0xc3, 0xc3, 0x91, 0xd9, 0x35, 0x7a, 0xb6, 0x69, 0xbf, 0xd0,
	0xca, 0x78, 0x0e, 0xea, 0x8d, 0xbe, 0x1d, 0x9a, 0xb6, 0xd9, 0xfb, 0x5a, 0xab, 0xd0, 0x1c, 0xd7,
	0x33, 0x9e, 0x1f, 0x19, 0x1d, 0xdb, 0xe8, 0x26, 0xa2, 0x55, 0x3c, 0xec, 0xb0, 0xdf, 0x69, 0xa7,
	0xd4, 0x81, 0xd4, 0xcd, 0xde, 0xd7, 0x23, 0xdb, 0x7c, 0x6a, 0xf4, 0x87, 0xb6, 0x56, 0xc3, 0x57,
	0x32, 0x1c, 0x18, 0xd6, 0xc8, 0x32, 0xda, 0x83, 0x7e, 0x4f, 0xd3, 0xf0, 0x05, 0x59, 0xc6, 0xc0,
	0xb0, 0xb5, 0x0d, 0x8c, 0x11, 0xf1, 0x6d, 0x84, 0x53, 0x99, 0xc6, 0x30, 0x3f, 0x84, 0x6b, 0x72,
	0x7f, 0x03, 0x73, 0x87, 0x31, 0xdb, 0xcf, 0xb5, 0x4d, 0x14, 0xc5, 0xb5, 0x7c, 0x7b, 0x5b, 0x34,
	0xca, 0xf5, 0xad, 0x03, 0xa3, 0xab, 0xdd, 0x44, 0xb5, 0x61, 0xef, 0xd0, 0xec, 0x1d, 0xb4, 0xf7,
	0x0e, 0x0d, 0xed, 0x16, 0x6b, 0xc2, 0x66, 0x26, 0xe0, 0x67, 0x86, 0x35, 0x30, 0xfb, 0x3d, 0xad,
	0x89, 0x73, 0x78, 0x86, 0xd3, 0xd9, 0x6f, 0x9b, 0x3d, 0xed, 0x36, 0x5e, 0x04, 0x3a, 0x3c, 0x42,
	0x8f, 0xef, 0x61, 0x0c, 0x9d, 0x7e, 0xaf, 0x67, 0x74, 0x6c, 0xe9, 0xc8, 0x7d, 0x56, 0x87, 0xf2,
	0xb0, 0x77, 0xd0, 0xeb, 0x7f, 0xd7, 0xd3, 0xfe, 0x93, 0xdb, 0xdb, 0x83, 0xf5, 0x20, 0x3c, 0x6d,
	0x89, 0xe5, 0x4f, 0xe1, 0xd1, 0x5e, 0xe5, 0x48, 0xd5, 0xd5, 0xaf, 0xdf, 0x3b, 0xf5, 0xc4, 0xd9,
	0xfc, 0xb8, 0xe5, 0x06, 0xd3, 0x9d, 0xc8, 0x89, 0x9c, 0x97, 0x1e, 0xdf, 0x39, 0x0d, 0x3e, 0x71,
	0x27, 0x1e, 0xf7, 0xc5, 0x27, 0xce, 0xcc, 0xdb, 0x71, 0x83, 0x90, 0x1f, 0x97, 0x48, 0xf1, 0xb3,
	0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x9d, 0x15, 0x49, 0x56, 0x17, 0x00, 0x00,
}
